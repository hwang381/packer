// Code generated by "mapstructure-to-hcl2 -type Config"; DO NOT EDIT.
package shell_local

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatConfig struct {
	PackerBuildName     string            `mapstructure:"packer_build_name" cty:"packer_build_name"`
	PackerBuilderType   string            `mapstructure:"packer_builder_type" cty:"packer_builder_type"`
	PackerDebug         bool              `mapstructure:"packer_debug" cty:"packer_debug"`
	PackerForce         bool              `mapstructure:"packer_force" cty:"packer_force"`
	PackerOnError       string            `mapstructure:"packer_on_error" cty:"packer_on_error"`
	PackerUserVars      map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables"`
	PackerSensitiveVars []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables"`
	Command             string            `cty:"command"`
	Inline              []string          `cty:"inline"`
	InlineShebang       string            `mapstructure:"inline_shebang" cty:"inline_shebang"`
	OnlyOn              []string          `mapstructure:"only_on" cty:"only_on"`
	TempfileExtension   string            `mapstructure:"tempfile_extension" cty:"tempfile_extension"`
	Script              string            `cty:"script"`
	Scripts             []string          `cty:"scripts"`
	Vars                []string          `mapstructure:"environment_vars" cty:"environment_vars"`
	EnvVarFormat        string            `mapstructure:"env_var_format" cty:"env_var_format"`
	ExecuteCommand      []string          `mapstructure:"execute_command" cty:"execute_command"`
	UseLinuxPathing     bool              `mapstructure:"use_linux_pathing" cty:"use_linux_pathing"`
}

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"PackerBuildName":     &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"PackerBuilderType":   &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"PackerDebug":         &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"PackerForce":         &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"PackerOnError":       &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"PackerUserVars":      &hcldec.BlockAttrsSpec{TypeName: "packer_user_variables", ElementType: cty.String, Required: false},
		"PackerSensitiveVars": &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"Command":             &hcldec.AttrSpec{Name: "command", Type: cty.String, Required: false},
		"Inline":              &hcldec.AttrSpec{Name: "inline", Type: cty.List(cty.String), Required: false},
		"InlineShebang":       &hcldec.AttrSpec{Name: "inline_shebang", Type: cty.String, Required: false},
		"OnlyOn":              &hcldec.AttrSpec{Name: "only_on", Type: cty.List(cty.String), Required: false},
		"TempfileExtension":   &hcldec.AttrSpec{Name: "tempfile_extension", Type: cty.String, Required: false},
		"Script":              &hcldec.AttrSpec{Name: "script", Type: cty.String, Required: false},
		"Scripts":             &hcldec.AttrSpec{Name: "scripts", Type: cty.List(cty.String), Required: false},
		"Vars":                &hcldec.AttrSpec{Name: "environment_vars", Type: cty.List(cty.String), Required: false},
		"EnvVarFormat":        &hcldec.AttrSpec{Name: "env_var_format", Type: cty.String, Required: false},
		"ExecuteCommand":      &hcldec.AttrSpec{Name: "execute_command", Type: cty.List(cty.String), Required: false},
		"UseLinuxPathing":     &hcldec.AttrSpec{Name: "use_linux_pathing", Type: cty.Bool, Required: false},
	}
	return s
}
