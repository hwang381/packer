// Code generated by "mapstructure-to-hcl2 -type Config"; DO NOT EDIT.
package chefclient

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatConfig struct {
	PackerBuildName            string                 `mapstructure:"packer_build_name" cty:"packer_build_name"`
	PackerBuilderType          string                 `mapstructure:"packer_builder_type" cty:"packer_builder_type"`
	PackerDebug                bool                   `mapstructure:"packer_debug" cty:"packer_debug"`
	PackerForce                bool                   `mapstructure:"packer_force" cty:"packer_force"`
	PackerOnError              string                 `mapstructure:"packer_on_error" cty:"packer_on_error"`
	PackerUserVars             map[string]string      `mapstructure:"packer_user_variables" cty:"packer_user_variables"`
	PackerSensitiveVars        []string               `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables"`
	Json                       map[string]interface{} `cty:"json"`
	ChefEnvironment            string                 `mapstructure:"chef_environment" cty:"chef_environment"`
	ChefLicense                string                 `mapstructure:"chef_license" cty:"chef_license"`
	ClientKey                  string                 `mapstructure:"client_key" cty:"client_key"`
	ConfigTemplate             string                 `mapstructure:"config_template" cty:"config_template"`
	ElevatedUser               string                 `mapstructure:"elevated_user" cty:"elevated_user"`
	ElevatedPassword           string                 `mapstructure:"elevated_password" cty:"elevated_password"`
	EncryptedDataBagSecretPath string                 `mapstructure:"encrypted_data_bag_secret_path" cty:"encrypted_data_bag_secret_path"`
	ExecuteCommand             string                 `mapstructure:"execute_command" cty:"execute_command"`
	GuestOSType                string                 `mapstructure:"guest_os_type" cty:"guest_os_type"`
	InstallCommand             string                 `mapstructure:"install_command" cty:"install_command"`
	KnifeCommand               string                 `mapstructure:"knife_command" cty:"knife_command"`
	NodeName                   string                 `mapstructure:"node_name" cty:"node_name"`
	PolicyGroup                string                 `mapstructure:"policy_group" cty:"policy_group"`
	PolicyName                 string                 `mapstructure:"policy_name" cty:"policy_name"`
	PreventSudo                bool                   `mapstructure:"prevent_sudo" cty:"prevent_sudo"`
	RunList                    []string               `mapstructure:"run_list" cty:"run_list"`
	ServerUrl                  string                 `mapstructure:"server_url" cty:"server_url"`
	SkipCleanClient            bool                   `mapstructure:"skip_clean_client" cty:"skip_clean_client"`
	SkipCleanNode              bool                   `mapstructure:"skip_clean_node" cty:"skip_clean_node"`
	SkipCleanStagingDirectory  bool                   `mapstructure:"skip_clean_staging_directory" cty:"skip_clean_staging_directory"`
	SkipInstall                bool                   `mapstructure:"skip_install" cty:"skip_install"`
	SslVerifyMode              string                 `mapstructure:"ssl_verify_mode" cty:"ssl_verify_mode"`
	TrustedCertsDir            string                 `mapstructure:"trusted_certs_dir" cty:"trusted_certs_dir"`
	StagingDir                 string                 `mapstructure:"staging_directory" cty:"staging_directory"`
	ValidationClientName       string                 `mapstructure:"validation_client_name" cty:"validation_client_name"`
	ValidationKeyPath          string                 `mapstructure:"validation_key_path" cty:"validation_key_path"`
}

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"PackerBuildName":            &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"PackerBuilderType":          &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"PackerDebug":                &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"PackerForce":                &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"PackerOnError":              &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"PackerUserVars":             &hcldec.BlockAttrsSpec{TypeName: "packer_user_variables", ElementType: cty.String, Required: false},
		"PackerSensitiveVars":        &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"Json":                       &hcldec.BlockAttrsSpec{TypeName: "json", ElementType: cty.String, Required: false},
		"ChefEnvironment":            &hcldec.AttrSpec{Name: "chef_environment", Type: cty.String, Required: false},
		"ChefLicense":                &hcldec.AttrSpec{Name: "chef_license", Type: cty.String, Required: false},
		"ClientKey":                  &hcldec.AttrSpec{Name: "client_key", Type: cty.String, Required: false},
		"ConfigTemplate":             &hcldec.AttrSpec{Name: "config_template", Type: cty.String, Required: false},
		"ElevatedUser":               &hcldec.AttrSpec{Name: "elevated_user", Type: cty.String, Required: false},
		"ElevatedPassword":           &hcldec.AttrSpec{Name: "elevated_password", Type: cty.String, Required: false},
		"EncryptedDataBagSecretPath": &hcldec.AttrSpec{Name: "encrypted_data_bag_secret_path", Type: cty.String, Required: false},
		"ExecuteCommand":             &hcldec.AttrSpec{Name: "execute_command", Type: cty.String, Required: false},
		"GuestOSType":                &hcldec.AttrSpec{Name: "guest_os_type", Type: cty.String, Required: false},
		"InstallCommand":             &hcldec.AttrSpec{Name: "install_command", Type: cty.String, Required: false},
		"KnifeCommand":               &hcldec.AttrSpec{Name: "knife_command", Type: cty.String, Required: false},
		"NodeName":                   &hcldec.AttrSpec{Name: "node_name", Type: cty.String, Required: false},
		"PolicyGroup":                &hcldec.AttrSpec{Name: "policy_group", Type: cty.String, Required: false},
		"PolicyName":                 &hcldec.AttrSpec{Name: "policy_name", Type: cty.String, Required: false},
		"PreventSudo":                &hcldec.AttrSpec{Name: "prevent_sudo", Type: cty.Bool, Required: false},
		"RunList":                    &hcldec.AttrSpec{Name: "run_list", Type: cty.List(cty.String), Required: false},
		"ServerUrl":                  &hcldec.AttrSpec{Name: "server_url", Type: cty.String, Required: false},
		"SkipCleanClient":            &hcldec.AttrSpec{Name: "skip_clean_client", Type: cty.Bool, Required: false},
		"SkipCleanNode":              &hcldec.AttrSpec{Name: "skip_clean_node", Type: cty.Bool, Required: false},
		"SkipCleanStagingDirectory":  &hcldec.AttrSpec{Name: "skip_clean_staging_directory", Type: cty.Bool, Required: false},
		"SkipInstall":                &hcldec.AttrSpec{Name: "skip_install", Type: cty.Bool, Required: false},
		"SslVerifyMode":              &hcldec.AttrSpec{Name: "ssl_verify_mode", Type: cty.String, Required: false},
		"TrustedCertsDir":            &hcldec.AttrSpec{Name: "trusted_certs_dir", Type: cty.String, Required: false},
		"StagingDir":                 &hcldec.AttrSpec{Name: "staging_directory", Type: cty.String, Required: false},
		"ValidationClientName":       &hcldec.AttrSpec{Name: "validation_client_name", Type: cty.String, Required: false},
		"ValidationKeyPath":          &hcldec.AttrSpec{Name: "validation_key_path", Type: cty.String, Required: false},
	}
	return s
}
