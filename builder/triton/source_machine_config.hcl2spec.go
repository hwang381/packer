// Code generated by "mapstructure-to-hcl2 -type SourceMachineConfig,MachineImageFilter"; DO NOT EDIT.
package triton

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatMachineImageFilter struct {
	MostRecent bool   `mapstructure:"most_recent" cty:"most_recent"`
	Name       string `cty:"name"`
	OS         string `cty:"os"`
	Version    string `cty:"version"`
	Public     bool   `cty:"public"`
	State      string `cty:"state"`
	Owner      string `cty:"owner"`
	Type       string `cty:"type"`
}

func (*MachineImageFilter) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"MostRecent": &hcldec.AttrSpec{Name: "most_recent", Type: cty.Bool, Required: false},
		"Name":       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"OS":         &hcldec.AttrSpec{Name: "os", Type: cty.String, Required: false},
		"Version":    &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"Public":     &hcldec.AttrSpec{Name: "public", Type: cty.Bool, Required: false},
		"State":      &hcldec.AttrSpec{Name: "state", Type: cty.String, Required: false},
		"Owner":      &hcldec.AttrSpec{Name: "owner", Type: cty.String, Required: false},
		"Type":       &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
	}
	return s
}

type FlatSourceMachineConfig struct {
	MachineName            string             `mapstructure:"source_machine_name" required:"false" cty:"source_machine_name"`
	MachinePackage         string             `mapstructure:"source_machine_package" required:"true" cty:"source_machine_package"`
	MachineImage           string             `mapstructure:"source_machine_image" required:"true" cty:"source_machine_image"`
	MachineNetworks        []string           `mapstructure:"source_machine_networks" required:"false" cty:"source_machine_networks"`
	MachineMetadata        map[string]string  `mapstructure:"source_machine_metadata" required:"false" cty:"source_machine_metadata"`
	MachineTags            map[string]string  `mapstructure:"source_machine_tags" required:"false" cty:"source_machine_tags"`
	MachineFirewallEnabled bool               `mapstructure:"source_machine_firewall_enabled" required:"false" cty:"source_machine_firewall_enabled"`
	MachineImageFilters    MachineImageFilter `mapstructure:"source_machine_image_filter" required:"false" cty:"source_machine_image_filter"`
}

func (*SourceMachineConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"MachineName":            &hcldec.AttrSpec{Name: "source_machine_name", Type: cty.String, Required: false},
		"MachinePackage":         &hcldec.AttrSpec{Name: "source_machine_package", Type: cty.String, Required: false},
		"MachineImage":           &hcldec.AttrSpec{Name: "source_machine_image", Type: cty.String, Required: false},
		"MachineNetworks":        &hcldec.AttrSpec{Name: "source_machine_networks", Type: cty.List(cty.String), Required: false},
		"MachineMetadata":        &hcldec.BlockAttrsSpec{TypeName: "source_machine_metadata", ElementType: cty.String, Required: false},
		"MachineTags":            &hcldec.BlockAttrsSpec{TypeName: "source_machine_tags", ElementType: cty.String, Required: false},
		"MachineFirewallEnabled": &hcldec.AttrSpec{Name: "source_machine_firewall_enabled", Type: cty.Bool, Required: false},
		"MachineImageFilters":    &hcldec.BlockObjectSpec{TypeName: "MachineImageFilter", Nested: hcldec.ObjectSpec((*MachineImageFilter)(nil).HCL2Spec())},
	}
	return s
}

type FlatSourceMachineConfig struct {
	MachineName            string             `mapstructure:"source_machine_name" required:"false" cty:"source_machine_name"`
	MachinePackage         string             `mapstructure:"source_machine_package" required:"true" cty:"source_machine_package"`
	MachineImage           string             `mapstructure:"source_machine_image" required:"true" cty:"source_machine_image"`
	MachineNetworks        []string           `mapstructure:"source_machine_networks" required:"false" cty:"source_machine_networks"`
	MachineMetadata        map[string]string  `mapstructure:"source_machine_metadata" required:"false" cty:"source_machine_metadata"`
	MachineTags            map[string]string  `mapstructure:"source_machine_tags" required:"false" cty:"source_machine_tags"`
	MachineFirewallEnabled bool               `mapstructure:"source_machine_firewall_enabled" required:"false" cty:"source_machine_firewall_enabled"`
	MachineImageFilters    MachineImageFilter `mapstructure:"source_machine_image_filter" required:"false" cty:"source_machine_image_filter"`
}

func (*SourceMachineConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"MachineName":            &hcldec.AttrSpec{Name: "source_machine_name", Type: cty.String, Required: false},
		"MachinePackage":         &hcldec.AttrSpec{Name: "source_machine_package", Type: cty.String, Required: false},
		"MachineImage":           &hcldec.AttrSpec{Name: "source_machine_image", Type: cty.String, Required: false},
		"MachineNetworks":        &hcldec.AttrSpec{Name: "source_machine_networks", Type: cty.List(cty.String), Required: false},
		"MachineMetadata":        &hcldec.BlockAttrsSpec{TypeName: "source_machine_metadata", ElementType: cty.String, Required: false},
		"MachineTags":            &hcldec.BlockAttrsSpec{TypeName: "source_machine_tags", ElementType: cty.String, Required: false},
		"MachineFirewallEnabled": &hcldec.AttrSpec{Name: "source_machine_firewall_enabled", Type: cty.Bool, Required: false},
		"MachineImageFilters":    &hcldec.BlockObjectSpec{TypeName: "MachineImageFilter", Nested: hcldec.ObjectSpec((*MachineImageFilter)(nil).HCL2Spec())},
	}
	return s
}
