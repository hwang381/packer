// Code generated by "mapstructure-to-hcl2 -type AccessConfig,VaultAWSEngineOptions"; DO NOT EDIT.
package common

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatAccessConfig struct {
	AccessKey             string                `mapstructure:"access_key" required:"true" cty:"access_key"`
	CustomEndpointEc2     string                `mapstructure:"custom_endpoint_ec2" required:"false" cty:"custom_endpoint_ec2"`
	DecodeAuthZMessages   bool                  `mapstructure:"decode_authorization_messages" required:"false" cty:"decode_authorization_messages"`
	InsecureSkipTLSVerify bool                  `mapstructure:"insecure_skip_tls_verify" required:"false" cty:"insecure_skip_tls_verify"`
	MFACode               string                `mapstructure:"mfa_code" required:"false" cty:"mfa_code"`
	ProfileName           string                `mapstructure:"profile" required:"false" cty:"profile"`
	RawRegion             string                `mapstructure:"region" required:"true" cty:"region"`
	SecretKey             string                `mapstructure:"secret_key" required:"true" cty:"secret_key"`
	SkipValidation        bool                  `mapstructure:"skip_region_validation" required:"false" cty:"skip_region_validation"`
	SkipMetadataApiCheck  bool                  `mapstructure:"skip_metadata_api_check" cty:"skip_metadata_api_check"`
	Token                 string                `mapstructure:"token" required:"false" cty:"token"`
	VaultAWSEngine        VaultAWSEngineOptions `mapstructure:"vault_aws_engine" required:"false" cty:"vault_aws_engine"`
}

func (*AccessConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"AccessKey":             &hcldec.AttrSpec{Name: "access_key", Type: cty.String, Required: false},
		"CustomEndpointEc2":     &hcldec.AttrSpec{Name: "custom_endpoint_ec2", Type: cty.String, Required: false},
		"DecodeAuthZMessages":   &hcldec.AttrSpec{Name: "decode_authorization_messages", Type: cty.Bool, Required: false},
		"InsecureSkipTLSVerify": &hcldec.AttrSpec{Name: "insecure_skip_tls_verify", Type: cty.Bool, Required: false},
		"MFACode":               &hcldec.AttrSpec{Name: "mfa_code", Type: cty.String, Required: false},
		"ProfileName":           &hcldec.AttrSpec{Name: "profile", Type: cty.String, Required: false},
		"RawRegion":             &hcldec.AttrSpec{Name: "region", Type: cty.String, Required: false},
		"SecretKey":             &hcldec.AttrSpec{Name: "secret_key", Type: cty.String, Required: false},
		"SkipValidation":        &hcldec.AttrSpec{Name: "skip_region_validation", Type: cty.Bool, Required: false},
		"SkipMetadataApiCheck":  &hcldec.AttrSpec{Name: "skip_metadata_api_check", Type: cty.Bool, Required: false},
		"Token":                 &hcldec.AttrSpec{Name: "token", Type: cty.String, Required: false},
		"VaultAWSEngine":        &hcldec.BlockObjectSpec{TypeName: "VaultAWSEngineOptions", Nested: hcldec.ObjectSpec((*VaultAWSEngineOptions)(nil).HCL2Spec())},
	}
	return s
}

type FlatVaultAWSEngineOptions struct {
	Name       string `mapstructure:"name" cty:"name"`
	RoleARN    string `mapstructure:"role_arn" cty:"role_arn"`
	TTL        string `mapstructure:"ttl" required:"false" cty:"ttl"`
	EngineName string `mapstructure:"engine_name" cty:"engine_name"`
}

func (*VaultAWSEngineOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Name":       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"RoleARN":    &hcldec.AttrSpec{Name: "role_arn", Type: cty.String, Required: false},
		"TTL":        &hcldec.AttrSpec{Name: "ttl", Type: cty.String, Required: false},
		"EngineName": &hcldec.AttrSpec{Name: "engine_name", Type: cty.String, Required: false},
	}
	return s
}
