// Code generated by "mapstructure-to-hcl2 -type AccessConfig"; DO NOT EDIT.
package openstack

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatAccessConfig struct {
	Username                    string `mapstructure:"username" required:"true" cty:"username"`
	UserID                      string `mapstructure:"user_id" cty:"user_id"`
	Password                    string `mapstructure:"password" required:"true" cty:"password"`
	IdentityEndpoint            string `mapstructure:"identity_endpoint" required:"true" cty:"identity_endpoint"`
	TenantID                    string `mapstructure:"tenant_id" required:"false" cty:"tenant_id"`
	TenantName                  string `mapstructure:"tenant_name" cty:"tenant_name"`
	DomainID                    string `mapstructure:"domain_id" cty:"domain_id"`
	DomainName                  string `mapstructure:"domain_name" required:"false" cty:"domain_name"`
	Insecure                    bool   `mapstructure:"insecure" required:"false" cty:"insecure"`
	Region                      string `mapstructure:"region" required:"false" cty:"region"`
	EndpointType                string `mapstructure:"endpoint_type" required:"false" cty:"endpoint_type"`
	CACertFile                  string `mapstructure:"cacert" required:"false" cty:"cacert"`
	ClientCertFile              string `mapstructure:"cert" required:"false" cty:"cert"`
	ClientKeyFile               string `mapstructure:"key" required:"false" cty:"key"`
	Token                       string `mapstructure:"token" required:"false" cty:"token"`
	ApplicationCredentialName   string `mapstructure:"application_credential_name" required:"false" cty:"application_credential_name"`
	ApplicationCredentialID     string `mapstructure:"application_credential_id" required:"false" cty:"application_credential_id"`
	ApplicationCredentialSecret string `mapstructure:"application_credential_secret" required:"false" cty:"application_credential_secret"`
	Cloud                       string `mapstructure:"cloud" required:"false" cty:"cloud"`
}

func (*AccessConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Username":                    &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"UserID":                      &hcldec.AttrSpec{Name: "user_id", Type: cty.String, Required: false},
		"Password":                    &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"IdentityEndpoint":            &hcldec.AttrSpec{Name: "identity_endpoint", Type: cty.String, Required: false},
		"TenantID":                    &hcldec.AttrSpec{Name: "tenant_id", Type: cty.String, Required: false},
		"TenantName":                  &hcldec.AttrSpec{Name: "tenant_name", Type: cty.String, Required: false},
		"DomainID":                    &hcldec.AttrSpec{Name: "domain_id", Type: cty.String, Required: false},
		"DomainName":                  &hcldec.AttrSpec{Name: "domain_name", Type: cty.String, Required: false},
		"Insecure":                    &hcldec.AttrSpec{Name: "insecure", Type: cty.Bool, Required: false},
		"Region":                      &hcldec.AttrSpec{Name: "region", Type: cty.String, Required: false},
		"EndpointType":                &hcldec.AttrSpec{Name: "endpoint_type", Type: cty.String, Required: false},
		"CACertFile":                  &hcldec.AttrSpec{Name: "cacert", Type: cty.String, Required: false},
		"ClientCertFile":              &hcldec.AttrSpec{Name: "cert", Type: cty.String, Required: false},
		"ClientKeyFile":               &hcldec.AttrSpec{Name: "key", Type: cty.String, Required: false},
		"Token":                       &hcldec.AttrSpec{Name: "token", Type: cty.String, Required: false},
		"ApplicationCredentialName":   &hcldec.AttrSpec{Name: "application_credential_name", Type: cty.String, Required: false},
		"ApplicationCredentialID":     &hcldec.AttrSpec{Name: "application_credential_id", Type: cty.String, Required: false},
		"ApplicationCredentialSecret": &hcldec.AttrSpec{Name: "application_credential_secret", Type: cty.String, Required: false},
		"Cloud":                       &hcldec.AttrSpec{Name: "cloud", Type: cty.String, Required: false},
	}
	return s
}

type FlatAccessConfig struct {
	Username                    string `mapstructure:"username" required:"true" cty:"username"`
	UserID                      string `mapstructure:"user_id" cty:"user_id"`
	Password                    string `mapstructure:"password" required:"true" cty:"password"`
	IdentityEndpoint            string `mapstructure:"identity_endpoint" required:"true" cty:"identity_endpoint"`
	TenantID                    string `mapstructure:"tenant_id" required:"false" cty:"tenant_id"`
	TenantName                  string `mapstructure:"tenant_name" cty:"tenant_name"`
	DomainID                    string `mapstructure:"domain_id" cty:"domain_id"`
	DomainName                  string `mapstructure:"domain_name" required:"false" cty:"domain_name"`
	Insecure                    bool   `mapstructure:"insecure" required:"false" cty:"insecure"`
	Region                      string `mapstructure:"region" required:"false" cty:"region"`
	EndpointType                string `mapstructure:"endpoint_type" required:"false" cty:"endpoint_type"`
	CACertFile                  string `mapstructure:"cacert" required:"false" cty:"cacert"`
	ClientCertFile              string `mapstructure:"cert" required:"false" cty:"cert"`
	ClientKeyFile               string `mapstructure:"key" required:"false" cty:"key"`
	Token                       string `mapstructure:"token" required:"false" cty:"token"`
	ApplicationCredentialName   string `mapstructure:"application_credential_name" required:"false" cty:"application_credential_name"`
	ApplicationCredentialID     string `mapstructure:"application_credential_id" required:"false" cty:"application_credential_id"`
	ApplicationCredentialSecret string `mapstructure:"application_credential_secret" required:"false" cty:"application_credential_secret"`
	Cloud                       string `mapstructure:"cloud" required:"false" cty:"cloud"`
}

func (*AccessConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Username":                    &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"UserID":                      &hcldec.AttrSpec{Name: "user_id", Type: cty.String, Required: false},
		"Password":                    &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"IdentityEndpoint":            &hcldec.AttrSpec{Name: "identity_endpoint", Type: cty.String, Required: false},
		"TenantID":                    &hcldec.AttrSpec{Name: "tenant_id", Type: cty.String, Required: false},
		"TenantName":                  &hcldec.AttrSpec{Name: "tenant_name", Type: cty.String, Required: false},
		"DomainID":                    &hcldec.AttrSpec{Name: "domain_id", Type: cty.String, Required: false},
		"DomainName":                  &hcldec.AttrSpec{Name: "domain_name", Type: cty.String, Required: false},
		"Insecure":                    &hcldec.AttrSpec{Name: "insecure", Type: cty.Bool, Required: false},
		"Region":                      &hcldec.AttrSpec{Name: "region", Type: cty.String, Required: false},
		"EndpointType":                &hcldec.AttrSpec{Name: "endpoint_type", Type: cty.String, Required: false},
		"CACertFile":                  &hcldec.AttrSpec{Name: "cacert", Type: cty.String, Required: false},
		"ClientCertFile":              &hcldec.AttrSpec{Name: "cert", Type: cty.String, Required: false},
		"ClientKeyFile":               &hcldec.AttrSpec{Name: "key", Type: cty.String, Required: false},
		"Token":                       &hcldec.AttrSpec{Name: "token", Type: cty.String, Required: false},
		"ApplicationCredentialName":   &hcldec.AttrSpec{Name: "application_credential_name", Type: cty.String, Required: false},
		"ApplicationCredentialID":     &hcldec.AttrSpec{Name: "application_credential_id", Type: cty.String, Required: false},
		"ApplicationCredentialSecret": &hcldec.AttrSpec{Name: "application_credential_secret", Type: cty.String, Required: false},
		"Cloud":                       &hcldec.AttrSpec{Name: "cloud", Type: cty.String, Required: false},
	}
	return s
}
