// Code generated by "mapstructure-to-hcl2 -type HWConfig"; DO NOT EDIT.
package common

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatHWConfig struct {
	CpuCount           int    `mapstructure:"cpus" required:"false" cty:"cpus"`
	MemorySize         int    `mapstructure:"memory" required:"false" cty:"memory"`
	CoreCount          int    `mapstructure:"cores" required:"false" cty:"cores"`
	Network            string `mapstructure:"network" required:"false" cty:"network"`
	NetworkAdapterType string `mapstructure:"network_adapter_type" required:"false" cty:"network_adapter_type"`
	Sound              bool   `mapstructure:"sound" required:"false" cty:"sound"`
	USB                bool   `mapstructure:"usb" required:"false" cty:"usb"`
	Serial             string `mapstructure:"serial" required:"false" cty:"serial"`
	Parallel           string `mapstructure:"parallel" required:"false" cty:"parallel"`
}

func (*HWConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"CpuCount":           &hcldec.AttrSpec{Name: "cpus", Type: cty.Number, Required: false},
		"MemorySize":         &hcldec.AttrSpec{Name: "memory", Type: cty.Number, Required: false},
		"CoreCount":          &hcldec.AttrSpec{Name: "cores", Type: cty.Number, Required: false},
		"Network":            &hcldec.AttrSpec{Name: "network", Type: cty.String, Required: false},
		"NetworkAdapterType": &hcldec.AttrSpec{Name: "network_adapter_type", Type: cty.String, Required: false},
		"Sound":              &hcldec.AttrSpec{Name: "sound", Type: cty.Bool, Required: false},
		"USB":                &hcldec.AttrSpec{Name: "usb", Type: cty.Bool, Required: false},
		"Serial":             &hcldec.AttrSpec{Name: "serial", Type: cty.String, Required: false},
		"Parallel":           &hcldec.AttrSpec{Name: "parallel", Type: cty.String, Required: false},
	}
	return s
}
