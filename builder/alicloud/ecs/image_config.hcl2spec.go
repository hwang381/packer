// Code generated by "mapstructure-to-hcl2 -type AlicloudDiskDevice,AlicloudDiskDevices"; DO NOT EDIT.
package ecs

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/hashicorp/packer/helper/config"
	"github.com/zclconf/go-cty/cty"
)

type FlatAlicloudDiskDevices struct {
	ECSSystemDiskMapping  AlicloudDiskDevice   `mapstructure:"system_disk_mapping" required:"false" cty:"system_disk_mapping"`
	ECSImagesDiskMappings []AlicloudDiskDevice `mapstructure:"image_disk_mappings" required:"false" cty:"image_disk_mappings"`
}

func (*AlicloudDiskDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"ECSSystemDiskMapping":  &hcldec.BlockObjectSpec{TypeName: "AlicloudDiskDevice", Nested: hcldec.ObjectSpec((*AlicloudDiskDevice)(nil).HCL2Spec())},
		"ECSImagesDiskMappings": hcldec.BlockListSpec{TypeName: "[]AlicloudDiskDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "AlicloudDiskDevice", Nested: hcldec.ObjectSpec((*AlicloudDiskDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatAlicloudDiskDevices struct {
	ECSSystemDiskMapping  AlicloudDiskDevice   `mapstructure:"system_disk_mapping" required:"false" cty:"system_disk_mapping"`
	ECSImagesDiskMappings []AlicloudDiskDevice `mapstructure:"image_disk_mappings" required:"false" cty:"image_disk_mappings"`
}

func (*AlicloudDiskDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"ECSSystemDiskMapping":  &hcldec.BlockObjectSpec{TypeName: "AlicloudDiskDevice", Nested: hcldec.ObjectSpec((*AlicloudDiskDevice)(nil).HCL2Spec())},
		"ECSImagesDiskMappings": hcldec.BlockListSpec{TypeName: "[]AlicloudDiskDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "AlicloudDiskDevice", Nested: hcldec.ObjectSpec((*AlicloudDiskDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatAlicloudDiskDevice struct {
	DiskName           string         `mapstructure:"disk_name" required:"false" cty:"disk_name"`
	DiskCategory       string         `mapstructure:"disk_category" required:"false" cty:"disk_category"`
	DiskSize           int            `mapstructure:"disk_size" required:"false" cty:"disk_size"`
	SnapshotId         string         `mapstructure:"disk_snapshot_id" required:"false" cty:"disk_snapshot_id"`
	Description        string         `mapstructure:"disk_description" required:"false" cty:"disk_description"`
	DeleteWithInstance bool           `mapstructure:"disk_delete_with_instance" required:"false" cty:"disk_delete_with_instance"`
	Device             string         `mapstructure:"disk_device" required:"false" cty:"disk_device"`
	Encrypted          config.Trilean `mapstructure:"disk_encrypted" required:"false" cty:"disk_encrypted"`
}

func (*AlicloudDiskDevice) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"DiskName":           &hcldec.AttrSpec{Name: "disk_name", Type: cty.String, Required: false},
		"DiskCategory":       &hcldec.AttrSpec{Name: "disk_category", Type: cty.String, Required: false},
		"DiskSize":           &hcldec.AttrSpec{Name: "disk_size", Type: cty.Number, Required: false},
		"SnapshotId":         &hcldec.AttrSpec{Name: "disk_snapshot_id", Type: cty.String, Required: false},
		"Description":        &hcldec.AttrSpec{Name: "disk_description", Type: cty.String, Required: false},
		"DeleteWithInstance": &hcldec.AttrSpec{Name: "disk_delete_with_instance", Type: cty.Bool, Required: false},
		"Device":             &hcldec.AttrSpec{Name: "disk_device", Type: cty.String, Required: false},
		"Encrypted":          &hcldec.AttrSpec{Name: "config.Trilean", Type: cty.Number, Required: false},
	}
	return s
}
