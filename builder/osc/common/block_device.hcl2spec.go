// Code generated by "mapstructure-to-hcl2 -type BlockDevice,BlockDevices,OMIBlockDevices,LaunchBlockDevices"; DO NOT EDIT.
package common

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatBlockDevice struct {
	DeleteOnVmDeletion bool   `mapstructure:"delete_on_vm_deletion" cty:"delete_on_vm_deletion"`
	DeviceName         string `mapstructure:"device_name" cty:"device_name"`
	IOPS               int64  `mapstructure:"iops" cty:"iops"`
	NoDevice           bool   `mapstructure:"no_device" cty:"no_device"`
	SnapshotId         string `mapstructure:"snapshot_id" cty:"snapshot_id"`
	VirtualName        string `mapstructure:"virtual_name" cty:"virtual_name"`
	VolumeType         string `mapstructure:"volume_type" cty:"volume_type"`
	VolumeSize         int64  `mapstructure:"volume_size" cty:"volume_size"`
}

func (*BlockDevice) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"DeleteOnVmDeletion": &hcldec.AttrSpec{Name: "delete_on_vm_deletion", Type: cty.Bool, Required: false},
		"DeviceName":         &hcldec.AttrSpec{Name: "device_name", Type: cty.String, Required: false},
		"IOPS":               &hcldec.AttrSpec{Name: "iops", Type: cty.Number, Required: false},
		"NoDevice":           &hcldec.AttrSpec{Name: "no_device", Type: cty.Bool, Required: false},
		"SnapshotId":         &hcldec.AttrSpec{Name: "snapshot_id", Type: cty.String, Required: false},
		"VirtualName":        &hcldec.AttrSpec{Name: "virtual_name", Type: cty.String, Required: false},
		"VolumeType":         &hcldec.AttrSpec{Name: "volume_type", Type: cty.String, Required: false},
		"VolumeSize":         &hcldec.AttrSpec{Name: "volume_size", Type: cty.Number, Required: false},
	}
	return s
}

type FlatOMIBlockDevices struct {
	OMIMappings []BlockDevice `mapstructure:"omi_block_device_mappings" cty:"omi_block_device_mappings"`
}

func (*OMIBlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"OMIMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatBlockDevices struct {
	OMIMappings    []BlockDevice `mapstructure:"omi_block_device_mappings" cty:"omi_block_device_mappings"`
	LaunchMappings []BlockDevice `mapstructure:"launch_block_device_mappings" cty:"launch_block_device_mappings"`
}

func (*BlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"OMIMappings":    hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
		"LaunchMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatBlockDevices struct {
	OMIMappings    []BlockDevice `mapstructure:"omi_block_device_mappings" cty:"omi_block_device_mappings"`
	LaunchMappings []BlockDevice `mapstructure:"launch_block_device_mappings" cty:"launch_block_device_mappings"`
}

func (*BlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"OMIMappings":    hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
		"LaunchMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatOMIBlockDevices struct {
	OMIMappings []BlockDevice `mapstructure:"omi_block_device_mappings" cty:"omi_block_device_mappings"`
}

func (*OMIBlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"OMIMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatBlockDevices struct {
	OMIMappings    []BlockDevice `mapstructure:"omi_block_device_mappings" cty:"omi_block_device_mappings"`
	LaunchMappings []BlockDevice `mapstructure:"launch_block_device_mappings" cty:"launch_block_device_mappings"`
}

func (*BlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"OMIMappings":    hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
		"LaunchMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatLaunchBlockDevices struct {
	LaunchMappings []BlockDevice `mapstructure:"launch_block_device_mappings" cty:"launch_block_device_mappings"`
}

func (*LaunchBlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"LaunchMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}

type FlatLaunchBlockDevices struct {
	LaunchMappings []BlockDevice `mapstructure:"launch_block_device_mappings" cty:"launch_block_device_mappings"`
}

func (*LaunchBlockDevices) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"LaunchMappings": hcldec.BlockListSpec{TypeName: "[]BlockDevice", Nested: &hcldec.BlockObjectSpec{TypeName: "BlockDevice", Nested: hcldec.ObjectSpec((*BlockDevice)(nil).HCL2Spec())}},
	}
	return s
}
