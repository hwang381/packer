// Code generated by "mapstructure-to-hcl2 -type SecurityGroupFilterOptions,OmiFilterOptions,SubnetFilterOptions,NetFilterOptions,BlockDevice"; DO NOT EDIT.
package common

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

type FlatBlockDevice struct {
	DeleteOnVmDeletion bool   `mapstructure:"delete_on_vm_deletion" cty:"delete_on_vm_deletion"`
	DeviceName         string `mapstructure:"device_name" cty:"device_name"`
	IOPS               int64  `mapstructure:"iops" cty:"iops"`
	NoDevice           bool   `mapstructure:"no_device" cty:"no_device"`
	SnapshotId         string `mapstructure:"snapshot_id" cty:"snapshot_id"`
	VirtualName        string `mapstructure:"virtual_name" cty:"virtual_name"`
	VolumeType         string `mapstructure:"volume_type" cty:"volume_type"`
	VolumeSize         int64  `mapstructure:"volume_size" cty:"volume_size"`
}

func (*BlockDevice) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"DeleteOnVmDeletion": &hcldec.AttrSpec{Name: "delete_on_vm_deletion", Type: cty.Bool, Required: false},
		"DeviceName":         &hcldec.AttrSpec{Name: "device_name", Type: cty.String, Required: false},
		"IOPS":               &hcldec.AttrSpec{Name: "iops", Type: cty.Number, Required: false},
		"NoDevice":           &hcldec.AttrSpec{Name: "no_device", Type: cty.Bool, Required: false},
		"SnapshotId":         &hcldec.AttrSpec{Name: "snapshot_id", Type: cty.String, Required: false},
		"VirtualName":        &hcldec.AttrSpec{Name: "virtual_name", Type: cty.String, Required: false},
		"VolumeType":         &hcldec.AttrSpec{Name: "volume_type", Type: cty.String, Required: false},
		"VolumeSize":         &hcldec.AttrSpec{Name: "volume_size", Type: cty.Number, Required: false},
	}
	return s
}

type FlatNetFilterOptions struct {
	Filters map[string]string `cty:"filters"`
}

func (*NetFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters": &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
	}
	return s
}

type FlatOmiFilterOptions struct {
	Filters    map[string]string `cty:"filters"`
	Owners     []string          `cty:"owners"`
	MostRecent bool              `mapstructure:"most_recent" cty:"most_recent"`
}

func (*OmiFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters":    &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
		"Owners":     &hcldec.AttrSpec{Name: "owners", Type: cty.List(cty.String), Required: false},
		"MostRecent": &hcldec.AttrSpec{Name: "most_recent", Type: cty.Bool, Required: false},
	}
	return s
}

type FlatSecurityGroupFilterOptions struct {
	Filters map[string]string `cty:"filters"`
}

func (*SecurityGroupFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters": &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
	}
	return s
}

type FlatSubnetFilterOptions struct {
	Filters  map[string]string `cty:"filters"`
	MostFree bool              `mapstructure:"most_free" cty:"most_free"`
	Random   bool              `mapstructure:"random" cty:"random"`
}

func (*SubnetFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters":  &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
		"MostFree": &hcldec.AttrSpec{Name: "most_free", Type: cty.Bool, Required: false},
		"Random":   &hcldec.AttrSpec{Name: "random", Type: cty.Bool, Required: false},
	}
	return s
}
